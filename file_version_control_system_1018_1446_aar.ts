// 代码生成时间: 2025-10-18 14:46:01
 * Features:
 * - Add new version of a file
 * - Retrieve a specific version of a file
 * - List all versions of a file
 * - Delete a version of a file
 */

import { PrismaClient } from '@prisma/client';

// Define the schema for the FileVersion model
// This model will be generated by PRISMA and used to interact with the database
export class FileVersion {
  id: string;
  fileId: string;
  versionNumber: number;
  content: string;
  createdAt: Date;
}

// Define the schema for the File model
// This model will be generated by PRISMA and used to interact with the database
export class File {
  id: string;
  name: string;
  versions: FileVersion[];
}

// Define the VersionControlService class
class VersionControlService {
  private prisma: PrismaClient;

  constructor() {
    this.prisma = new PrismaClient();
  }

  // Add a new version of a file
  async addFileVersion(fileId: string, content: string): Promise<FileVersion> {
    try {
      const newVersion = await this.prisma.fileVersion.create({
        data: {
          fileId: fileId,
          content: content,
          versionNumber: await this.getNextVersionNumber(fileId),
          createdAt: new Date(),
        },
      });
      return newVersion;
    } catch (error) {
      console.error('Error adding file version:', error);
      throw error;
    }
  }

  // Retrieve a specific version of a file
  async getFileVersion(fileId: string, versionNumber: number): Promise<FileVersion | null> {
    try {
      return await this.prisma.fileVersion.findUnique({
        where: {
          fileId_versionNumber: {
            fileId: fileId,
            versionNumber: versionNumber,
          },
        },
      });
    } catch (error) {
      console.error('Error retrieving file version:', error);
      throw error;
    }
  }

  // List all versions of a file
  async listFileVersions(fileId: string): Promise<FileVersion[]> {
    try {
      return await this.prisma.fileVersion.findMany({
        where: {
          fileId: fileId,
        },
      });
    } catch (error) {
      console.error('Error listing file versions:', error);
      throw error;
    }
  }

  // Delete a version of a file
  async deleteFileVersion(fileId: string, versionNumber: number): Promise<{ count: number }> {
    try {
      return await this.prisma.fileVersion.deleteMany({
        where: {
          fileId_versionNumber: {
            fileId: fileId,
            versionNumber: versionNumber,
          },
        },
      });
    } catch (error) {
      console.error('Error deleting file version:', error);
      throw error;
    }
  }

  // Helper function to get the next version number for a file
  private async getNextVersionNumber(fileId: string): Promise<number> {
    const versions = await this.listFileVersions(fileId);
    return versions.length + 1;
  }
}

// Example usage
const versionControlService = new VersionControlService();

// Add a new version of a file
versionControlService.addFileVersion('file-123', 'Initial content')
  .then(version => console.log('Added new version:', version))
  .catch(error => console.error('Failed to add new version:', error));

// Retrieve a specific version of a file
versionControlService.getFileVersion('file-123', 1)
  .then(version => console.log('Retrieved version:', version))
  .catch(error => console.error('Failed to retrieve version:', error));

// List all versions of a file
versionControlService.listFilesVersions('file-123')
  .then(versions => console.log('Listed versions:', versions))
  .catch(error => console.error('Failed to list versions:', error));

// Delete a version of a file
versionControlService.deleteFileVersion('file-123', 1)
  .then(result => console.log('Deleted version:', result))
  .catch(error => console.error('Failed to delete version:', error));